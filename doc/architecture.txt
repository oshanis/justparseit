The Policy Editor Architecture:
---------------------------------

The Workflow

Policy Template Editor
	|
	V
Policy Editor
	|
	V
Policy Parser
	|
	V
RDF Generator

There are 2 levels of policy authoring as shown in the workflow above.

1. Top level abstract policy definition, which defines the structure of the policy
Example template:
POLICY: ENTITY [can|cannot] [use|transfer|access] DATA for the PURPOSE only when CONDITION 

2. Actual policy which follows one of those formats already defined
Example:
Committee on Discipline (CoD)Ê can use proximity card data from the card reader logs for the purpose of criminal investigations only.



Policy Template Editor
----------------------
TBD


Policy Editor
-------------
TBD


Policy Parser
-------------
TBD


RDF Generator
-------------
When the language model implemented by the policy parser identifies the corresponding parts of the sentence the RDF Generator should create the AIR rules as follows:

By default the air policy language[1] should be prefixed.
In addition the user should be able to browse through and select the relevant ontologies in which this policy will be applied in.
If the domain is not available, it should be possible for the user to define the domain ontology.
(may be this step is not required for this project? for the moment, let's assume that everything is pre-defined)

[1] http://dig.csail.mit.edu/TAMI/2007/amord/air
